{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","userId","usersFromServer","find","getUserByName","userName","App","useState","visibleTodos","setTodos","author","setAuthor","task","setTask","isActiveTask","setIsActiveTask","isActiveAuthor","setIsActiveAuthor","isTaskError","setIsTaskError","isAuthorError","setIsAuthorError","action","method","onSubmit","e","preventDefault","newTodo","Math","max","push","updateTodos","htmlFor","type","placeholder","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6de09d3.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null | undefined;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames(\n      'TodoInfo',\n      { 'TodoInfo--completed': todo.completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    <UserInfo user={todo?.user} />\n  </article>\n);\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nfunction getUserByName(userName: string): User | undefined {\n  return usersFromServer.find(user => user.name === userName);\n}\n\nexport const App = () => {\n  const [visibleTodos, setTodos] = useState(todos);\n  const [author, setAuthor] = useState('Choose a user');\n  const [task, setTask] = useState('');\n  const [isActiveTask, setIsActiveTask] = useState(false);\n  const [isActiveAuthor, setIsActiveAuthor] = useState(false);\n  const [isTaskError, setIsTaskError] = useState(false);\n  const [isAuthorError, setIsAuthorError] = useState(false);\n\n  const updateTodos = () => {\n    setIsTaskError(!isActiveTask);\n    setIsAuthorError(!isActiveAuthor);\n\n    if (isActiveTask && isActiveAuthor) {\n      const maxId = Math.max(...todos.map(todo => todo.id));\n      const newTodo: Todo = {\n        id: maxId + 1,\n        userId: getUserByName(author)?.id,\n        title: task,\n        completed: false,\n        user: getUserByName(author),\n      };\n\n      todos.push(newTodo);\n      setTodos(todos);\n      setTask('');\n      setAuthor('Choose a user');\n      setIsActiveTask(false);\n      setIsActiveAuthor(false);\n      setIsTaskError(false);\n      setIsAuthorError(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          updateTodos();\n        }}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title\"\n            placeholder=\"Enter a title\"\n            value={task}\n            onChange={(e) => {\n              setTask(e.target.value);\n              setIsActiveTask(true);\n              setIsTaskError(false);\n            }}\n          />\n          {isTaskError\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"title\">User: </label>\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"title\"\n            value={author}\n            onChange={(e) => {\n              setAuthor(e.target.value);\n              setIsActiveAuthor(true);\n              setIsAuthorError(false);\n            }}\n          >\n            <option value=\"\">Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                value={user.name}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {isAuthorError\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}